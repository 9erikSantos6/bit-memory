cmake_minimum_required(VERSION 3.22)  # ‚úÖ Adicionado para evitar erro

# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.0)
set(toolchainVersion 13_3_Rel1)
set(picotoolVersion 2.1.0)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================

# Importar SDK do Raspberry Pi Pico
include(pico_sdk_import.cmake)  # üîπ Mantenha esta linha aqui

# Definir o projeto
project(BitMemory C CXX ASM)  # üîπ O `project()` precisa vir antes do `pico_sdk_init()`

# Inicializar o SDK do Pico
pico_sdk_init()  # ‚úÖ Movido para depois de `project()`

# Definir a placa alvo (Pico padr√£o)
set(PICO_BOARD pico CACHE STRING "Board type")

# Adicionar execut√°vel com os arquivos fonte
add_executable(BitMemory
    src/main.c
    src/MatrizLED.c
    src/Sprite.c
    src/MatrizRenderizador.c
    src/Joystick.c
)

# Definir nome e vers√£o do programa
pico_set_program_name(BitMemory "BitMemory")
pico_set_program_version(BitMemory "0.1")

# Gerar cabe√ßalho PIO para controle dos LEDs
pico_generate_pio_header(BitMemory ${CMAKE_CURRENT_LIST_DIR}/lib/ws2818b.pio)

# Habilitar sa√≠da via UART/USB
pico_enable_stdio_uart(BitMemory 0)
pico_enable_stdio_usb(BitMemory 1)

# Incluir bibliotecas necess√°rias
target_link_libraries(BitMemory
    pico_stdlib
    hardware_pio
    hardware_clocks
    hardware_adc
    hardware_gpio
)

# Incluir diret√≥rios com cabe√ßalhos
target_include_directories(BitMemory PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}/include
)

# Gerar arquivos adicionais (UF2, BIN, HEX, etc.)
pico_add_extra_outputs(BitMemory)
